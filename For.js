/*Utilize uma estrutura de repeti√ß√£o para exibir cada item de um array.

Observe a estrutura abaixo:

Copiar
const numeros = [1, 2, 3, 4, 5];
A constante numeros √© um array de n√∫meros. Sendo assim:

Crie um algoritmo que utiliza estrutura de repeti√ß√£o;
Exiba no console cada item de dentro do array.*/
const numeros = [1, 2, 3, 4, 5];
/***** Escreva seu c√≥digo nas linhas abaixo *****/
for (let i = 0; i < numeros.length; i++) {
  console.log(numeros[i]);
}

/*const valoresProdutos = [10, 12, 8];
let somaTotal = 0;

for (let i = 0; i < valoresProdutos.length; i++) {
  somaTotal += valoresProdutos[i];
}

console.log("O valor total da compra √©: R$" + somaTotal);
*/
const valoresProdutos = [10, 12, 8];
let somaTotal = 0;
/***** Escreva seu c√≥digo nas linhas abaixo *****/
for (let i = 0; i < valoresProdutos.length; i++) {
  somaTotal += valoresProdutos[i];
}

console.log("O valor total da compra √©: R$" + somaTotal);

/*Mario decidiu fazer uma salada de frutas e precisa comprar banana, ma√ß√£, mam√£o e goiaba. 
Ele criou uma lista com JavaScript para guardar esses valores:

Copiar
const listaDeFrutas = ['banana', 'ma√ß√£', 'mam√£o', 'goiaba'];
Mario esqueceu de adicionar ‚Äòmanga‚Äô em sua lista e precisa da sua ajuda para resolver esse problema:

Utilize o m√©todo push para adicionar o valor 'manga' ao final do array listaDeFrutas;

Use a estrutura de repeti√ß√£o for na constante listaDeFrutas atualizada para exibir todas as frutas da lista.
*/
const listaDeFrutas = ["banana", "ma√ß√£", "mam√£o", "goiaba"];

// Adiciona 'manga' ao final do array
listaDeFrutas.push("manga");

// Utiliza um loop for para exibir todas as frutas da lista
for (let i = 0; i < listaDeFrutas.length; i++) {
  console.log(listaDeFrutas[i]);
}

/*Jo√£o precisa ajudar sua filha Maria a estudar a tabuada do 3 e do 7, e teve a ideia de usar a tecnologia ao seu favor, 
contudo precisa da sua ajuda:

Desenvolva um algoritmo que multiplique os n√∫meros de 1 a 9 pelos n√∫meros 3 e 7. 
Voc√™ ter√° como multiplicando os n√∫meros 3 e 7 e como multiplicadores os n√∫meros de 1 a 9.

Exiba todas as opera√ß√µes com seus respectivos resultados no console do seu navegador.
De olho na dica üëÄ : Para exibir as opera√ß√µes no console do seu navegador, 
voc√™ pode utilizar duas estruturas de repeti√ß√£o for aninhadas, 
que v√£o percorrer item a item. Para come√ßar, voc√™ pode usar a constante multiplicador dada a seguir:

Copiar
const multiplicador = [3, 7];
O console deve ter um retorno como esse:*/
/*3 x 1 = 3
3 x 2 = 6
3 x 3 = 9
3 x 4 = 12
3 x 5 = 15
3 x 6 = 18
3 x 7 = 21
3 x 8 = 24
3 x 9 = 27
7 x 1 = 7
7 x 2 = 14
7 x 3 = 21
7 x 4 = 28
7 x 5 = 35
7 x 6 = 42
7 x 7 = 49
7 x 8 = 56
7 x 9 = 63*/
/*Quando for desenvolver o segundo for utilize os n√∫meros de 1 a 9. üòâ*/
const multiplicador = [3, 7];

// Loop para iterar atrav√©s dos multiplicadores (3 e 7)
for (let i = 0; i < multiplicador.length; i++) {
  const numeroMultiplicador = multiplicador[i];

  // Loop para iterar atrav√©s dos n√∫meros de 1 a 9
  for (let j = 1; j <= 9; j++) {
    const resultado = numeroMultiplicador * j;
    console.log(`${numeroMultiplicador} x ${j} = ${resultado}`);
  }
}

/*Crie uma fun√ß√£o que exiba a frase: Vamo que vamo! üöÄ
Crie uma fun√ß√£o mostrarFrase que retorne a frase ‚ÄòVamo que vamo!‚Äô quando chamada.*/
function mostrarFrase() {
  return "Vamo que vamo! üöÄ";
}

// Para exibir a frase, voc√™ pode chamar a fun√ß√£o assim:
console.log(mostrarFrase());

/* Crie uma fun√ß√£o saudacao que recebe um par√¢metro nome e mostre uma mensagem de sauda√ß√£o, por exemplo: 'Ol√°, Julia!'.
 */
function saudacao(nome) {
  const saudacao = "Ol√°, " + nome + "!";
  return saudacao;
}

console.log(saudacao("Julia"));

/*Crie uma fun√ß√£o clientePedido que receba um par√¢metro numeroPedido. Considere as condi√ß√µes a seguir:

Se numeroPedido for igual a 1, retorne a mensagem 'Pizza de Calabresa';
Se numeroPedido for igual a 2, retorne a mensagem 'Pizza de Quatro Queijos';
Se numeroPedido for igual a 3, retorne a mensagem 'Pizza de Frango com Catupiry';
Se numeroPedido for igual a 4, retorne a mensagem 'Pizza de Brigadeiro';
Se numeroPedido n√£o entrar nas condi√ß√µes acima, retorne a mensagem 'N√∫mero do pedido inv√°lido!'.*/
function clientePedido(numeroPedido) {
  if (numeroPedido === 1) {
    return "Pizza de Calabresa";
  } else if (numeroPedido === 2) {
    return "Pizza de Quatro Queijos";
  } else if (numeroPedido === 3) {
    return "Pizza de Frango com Catupiry";
  } else if (numeroPedido === 4) {
    return "Pizza de Brigadeiro";
  } else {
    return "N√∫mero do pedido inv√°lido!";
  }
}

// Exemplos de uso:
console.log(clientePedido(1)); // Deve retornar 'Pizza de Calabresa'
console.log(clientePedido(3)); // Deve retornar 'Pizza de Frango com Catupiry'
console.log(clientePedido(5)); // Deve retornar 'N√∫mero do pedido inv√°lido!'

/*Fazendo m√©dia üî¢
Crie uma fun√ß√£o chamada mediaDosNumeros que recebe como par√¢metro um array de n√∫meros chamado arrayNumeros e retorna a m√©dia desses n√∫meros.

De olho na dica üëÄ : Use uma estrutura de repeti√ß√£o for para percorrer o array.*/

function mediaDosNumeros(arrayNumeros) {
  if (arrayNumeros.length === 0) {
    return 0; // Retorna 0 se o array estiver vazio para evitar divis√£o por zero.
  }

  let soma = 0;

  for (let i = 0; i < arrayNumeros.length; i++) {
    soma += arrayNumeros[i];
  }

  const media = soma / arrayNumeros.length;
  return media;
}

// Exemplo de uso:
const numeros = [10, 20, 30, 40, 50];
console.log(mediaDosNumeros(numeros)); // Deve retornar 30
